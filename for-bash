# git-logger
preexec(){
	COMMAND=$@
	COMMAND_TYPE=`type $COMMAND 2> /dev/null`
	if [[ ! -z $COMMAND_TYPE ]] && [[ $COMMAND_TYPE =~ "is aliased to" ]]; then
		REMOVE_ALIAS=`echo $COMMAND_TYPE | sed -e "s/^.* is aliased to //"`
		COMMAND=${REMOVE_ALIAS:1:${#REMOVE_ALIAS}-2}
	fi

	IS_INSIDE_REPOSITORY=`command git rev-parse --is-inside-work-tree 2> /dev/null`
	REPOSITORY_ROOT_PATH=`command git rev-parse --show-toplevel 2> /dev/null`

	if [[ $COMMAND =~ ^git\  ]] && [ "$IS_INSIDE_REPOSITORY" = "true" ]; then
		TIMESTAMP=`date +%s`
		BEFORE_SHA=`command git rev-parse --verify HEAD`
		CURRENT_BRANCH=`command git rev-parse --abbrev-ref HEAD`
		CURRENT_REMOTE_BRANCH=`command git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD) 2> /dev/null`
		USER_NAME=`command git config user.name`
		USER_EMAIL=`command git config user.email`
		REPOSITORY_ROOT_BASE_NAME=`basename $REPOSITORY_ROOT_PATH`
		REPOSITORY_ROOT_DIR_NAME=`dirname $REPOSITORY_ROOT_PATH`
		CURRENT_DIR_NAME=`pwd -P`

		echo \{\"ts\":$TIMESTAMP,\"type\":\"LOG\",\"command\":\"$COMMAND\",\"user_name\":\"$USER_NAME\",\"user_email\":\"$USER_EMAIL\",\"sha\":\"$BEFORE_SHA\",\"root_path\":\"$REPOSITORY_ROOT_BASE_NAME\",\"execute_path\":\"${CURRENT_DIR_NAME#$REPOSITORY_ROOT_DIR_NAME/}\",\"branch\":\"$CURRENT_BRANCH\",\"remote_branch\":\"$CURRENT_REMOTE_BRANCH\"\}, >> $REPOSITORY_ROOT_PATH/.git/.git_history
	fi
}

preexec_invoke_exec(){
	[ -n "$COMP_LINE" ] && return
	[ "$BASH_COMMAND" = "$PROMPT_COMMAND" ] && return
	local this_command=`history 1 | sed -e "s/^[ ]*[0-9]*[ ]*//g"`;
	preexec "$this_command"
}
trap 'preexec_invoke_exec' DEBUG


dispatch() {
	export EXIT_STATUS="$?"

	local f
	for f in ${!PROMPT_COMMAND_*}; do
		eval "${!f}"
	done
	unset f
}
export PROMPT_COMMAND='dispatch'


chdir() {
	VERSION="0.0.6"
	IS_INSIDE_REPOSITORY=`command git rev-parse --is-inside-work-tree 2> /dev/null`
	REPOSITORY_ROOT_PATH=`command git rev-parse --show-toplevel 2> /dev/null`
	if [ "$IS_INSIDE_REPOSITORY" = "true" ]; then
		if [ -e "$REPOSITORY_ROOT_PATH/.git/hooks/git-logger" ]; then
			GIT_LOGGER_VERSION=`cat $REPOSITORY_ROOT_PATH/.git/hooks/git-logger`
			if [ $GIT_LOGGER_VERSION = $VERSION ]; then
				unset text
			else
				text=" update git-logger hooks to $VERSION"
			fi
		else
			text=" git-logger hooks is not installed"
		fi
	else
		unset text
	fi

	export PS1="\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]${text} \n\$ "
}
export PROMPT_COMMAND_CHDIR='chdir'


nextexec_git_command() {
	COMMAND=`fc -l -1 | cut -d " " -f2-`
	COMMAND_TYPE=`type $COMMAND 2> /dev/null`
	if [[ ! -z $COMMAND_TYPE ]] && [[ $COMMAND_TYPE =~ "is aliased to" ]]; then
		REMOVE_ALIAS=`echo $COMMAND_TYPE | sed -e "s/^.* is aliased to //"`
		COMMAND=${REMOVE_ALIAS:1:${#REMOVE_ALIAS}-2}
	fi

	if [[ $COMMAND =~ ^git\  ]]; then
		# write something here
		echo $COMMAND
	fi
}
export PROMPT_COMMAND_NEXTGITCOMMAND='nextexec_git_command'
